#!/usr/bin/env python3
"""
Script de inicializa√ß√£o do banco de dados para o Render
Execute este script ap√≥s o primeiro deploy para configurar o banco
"""
import os
import sys
import logging

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(__file__))

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def main():
    """Fun√ß√£o principal de inicializa√ß√£o"""
    logger.info("üöÄ Inicializando banco de dados no Render...")
    
    try:
        # Verificar se DATABASE_URL est√° configurada
        database_url = os.getenv('DATABASE_URL')
        if not database_url:
            logger.error("‚ùå DATABASE_URL n√£o configurada")
            logger.info("Configure a vari√°vel de ambiente DATABASE_URL no Render")
            sys.exit(1)
        
        # Configurar Flask app
        from flask import Flask
        from src.models.user import db
        
        # Importar todos os modelos
        from src.models.climate_data import ClimateData
        from src.models.arbovirus_data import ArbovirusData
        from src.models.prediction import Prediction
        from src.models.user import User
        
        app = Flask(__name__)
        app.config['SQLALCHEMY_DATABASE_URI'] = database_url
        app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
        app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'default-key')
        
        # Inicializar banco
        db.init_app(app)
        
        with app.app_context():
            logger.info("üìä Criando tabelas...")
            db.create_all()
            logger.info("‚úÖ Tabelas criadas com sucesso")
            
            # Verificar tabelas criadas
            inspector = db.inspect(db.engine)
            tables = inspector.get_table_names()
            logger.info(f"üìã Tabelas dispon√≠veis: {tables}")
            
            # Criar √≠ndices otimizados
            logger.info("üîç Criando √≠ndices...")
            try:
                from src.utils.postgres_optimizer import postgres_optimizer
                created_indexes = postgres_optimizer.create_indexes()
                logger.info(f"‚úÖ {created_indexes} √≠ndices criados")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  Erro ao criar √≠ndices: {e}")
            
            # Executar otimiza√ß√µes
            logger.info("‚ö° Executando otimiza√ß√µes...")
            try:
                from src.utils.postgres_optimizer import postgres_optimizer
                postgres_optimizer.optimize_queries()
                logger.info("‚úÖ Otimiza√ß√µes executadas")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  Erro nas otimiza√ß√µes: {e}")
        
        logger.info("üéâ Inicializa√ß√£o conclu√≠da com sucesso!")
        logger.info("üí° Pr√≥ximos passos:")
        logger.info("   1. Verificar se os cron jobs est√£o ativos no Render")
        logger.info("   2. Monitorar logs dos jobs de coleta")
        logger.info("   3. Verificar se os dados est√£o sendo coletados")
        
    except Exception as e:
        logger.error(f"‚ùå Erro na inicializa√ß√£o: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

